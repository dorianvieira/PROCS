/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package fr.parisnanterre.miage.procs.sam.server;

import static java.lang.Integer.*;

import static spark.Spark.*;

import java.util.HashMap;

import fr.parisnanterre.miage.procs.sam.core.*;

public class App {

    private static final String JSON = "application/json";

    public static DAO dao;
    public static JSONTransformer json;

    public static void main(String[] args) {
        dao = new DAO();
        json = new JSONTransformer();
        port(9000);

        path("/personnes", () -> {
            get("",
                (req,res) -> {
                    res.status(200);
                    res.type(JSON);
                    return dao.getPersonnes();
                }, 
                json);
            //Pour ajouter une personne POST http://localhost:9000/personnes
            post("", //post = idempotent //http://localhost:9000/personnes?nom="pierre"&prenom="paul" api ressource pas un api méthode donc le lien est mauvais
                    (req,res) -> {
                        // cas 1: on a les éléments pour créér une personne
                        // noter l'utilisation du constructeur Personne()
                        Personne p = json.mapper().readValue(req.body(),Personne.class);
                        if (p.getNom() == null) {
                            res.status(400);
                            return "nom manquant";
                        }
                        if (p.getPrenom() == null) {
                            res.status(400);
                            return "prenom manquant";
                        }
                        dao.createPersonne(p.getNom(), p.getPrenom());
                        res.status(201);
                        return "ok";
                    });

            get("/:id",
                (req,res) -> {
                    Personne p = dao.getPersonne(parseInt(req.params("id")));
                    if(p != null) { res.status(200); }
                    else { res.status(404); }
                    res.type(JSON);
                    return p;
                },
                json);

        });

        path("/voitures", () -> {
            get("", 
                (req,res) -> {
                    res.status(200);
                    res.type(JSON);
                    return dao.getVoitures();
                },
                json);
            path("/:immatriculation", () -> {
                get("",
                    (req,res) -> {
                        Voiture v = dao.getVoiture(req.params("immatriculation"));
                        if(v != null) { res.status(200); }
                        else { res.status(404); }
                        res.type(JSON);
                        return v;
                    },
                    json);
                get("/proprietaire",
                    (req,res) -> {
                        Personne p = null;
                        Voiture v = dao.getVoiture(req.params("immatriculation"));
                        if(v!=null) {
                            res.status(200);
                            p = v.getProprietaire();
                        }
                        else { res.status(404); }
                        res.type(JSON);
                        return p;
                    },
                    json);
            });

            //Ajouter une voiture POST http://localhost:9000/voitures
            post("",
                (req,res) -> {
                    // cas 2: on a des éléments différents de ceux d'une Voiture
                    // noter les différences avec le cas 1
                    HashMap <String,Object> params = json.mapper().readValue(req.body(), HashMap.class);
                    if (!params.containsKey("immatriculation") || !(params.get("immatriculation") instanceof String)) {
                        res.status(400);
                        return "immatriculation manquante ou non string";
                    }
                    if (!params.containsKey("modele") || !(params.get("modele") instanceof String)) {
                        res.status(400);
                        return "modele manquant ou non string";
                    }
                    if (!params.containsKey("proprietaire") || !(params.get("proprietaire") instanceof String)) {
                        res.status(400);
                        return "proprietaire manquant ou non string";
                    }
                    String immatriculation = (String) params.get("immatriculation");
                    String modele = (String) params.get("modele");
                    int proprietaire = parseInt((String)params.get("proprietaire"));
                    Personne p = dao.getPersonne(proprietaire);
                    if (p == null) {
                        res.status(400);
                        return "proprietaire inconnu";
                    }
                    dao.createVoiture(immatriculation, modele);
                    dao.getVoiture(immatriculation).setProprietaire(p);
                    res.status(201);
                    return "ok";
                });

            //Modifier une voiture PUT http://localhost:9000/voitures/id de la voiture =plaque
            put(":immatriculation",
                    (req,res) -> {
                        // cas 2: on a des éléments différents de ceux d'une Voiture
                        // noter les différences avec le cas 1
                        HashMap <String,Object> params = json.mapper().readValue(req.body(), HashMap.class);
                        if (!params.containsKey("immatriculation") || !(params.get("immatriculation") instanceof String)) {
                            res.status(400);
                            return "immatriculation manquante ou non string";
                        }
                        if (!params.containsKey("modele") || !(params.get("modele") instanceof String)) {
                            res.status(400);
                            return "modele manquant ou non string";
                        }
                        if (!params.containsKey("proprietaire") || !(params.get("proprietaire") instanceof String)) {
                            res.status(400);
                            return "proprietaire manquant ou non string";
                        }
                        String immatriculation = (String) params.get("immatriculation");
                        String modele = (String) params.get("modele");
                        int proprietaire = parseInt((String)params.get("proprietaire"));
                        Personne p = dao.getPersonne(proprietaire);
                        if (p == null) {
                            res.status(400);
                            return "proprietaire inconnu";
                        }
                        dao.createVoiture(immatriculation, modele);
                        dao.getVoiture(immatriculation).setProprietaire(p);
                        res.status(201);
                        return "ok";
                    });

            //Supprimer une voiture DELETE http://localhost:9000/voitures/immatriculation de la voiture =plaque
            delete(":immatriculation",
                    (req,res) -> {
                        // cas 2: on a des éléments différents de ceux d'une Voiture
                        // noter les différences avec le cas 1
                        HashMap <String,Object> params = json.mapper().readValue(req.body(), HashMap.class);
                        if (!params.containsKey("immatriculation") || !(params.get("immatriculation") instanceof String)) {
                            res.status(400);
                            return "immatriculation manquante ou non string";
                        }

                        String immatriculation = (String) params.get("immatriculation");

                        dao.deleteVoiture(immatriculation);
                        res.status(201);
                        return "voiture supprimée";
                    });
        });

    }
}
